name: Run benchmarks on Github runners

on:
  workflow_dispatch:
    inputs:
      dir:
        description: The directory to use
        type: choice
        required: true
        options:
          - '01-basic'
      memory:
        description: The memory of k8s cluster
        type: choice
        default: 12g
        required: true
        options:
          - 12g
          - 10g
          - 8g
          - 6g
      cpus:
        description: The cpus of k8s cluster
        type: choice
        default: '4'
        required: true
        options:
          - '4'
          - '3'
          - '2'
          - '1'

jobs:
  prepare:
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: echo
        if: false
        run: echo
    outputs:
      registry: ${{ vars.REGISTRY }}
      docker-namespace: ${{ vars.DOCKER_NAMESPACE || 'efrei' }}

  build:
    runs-on: ubuntu-latest
    needs: prepare
    environment: preview
    env:
      IMAGE: ${{ needs.prepare.outputs.registry }}/${{ needs.prepare.outputs.docker-namespace }}/${{ inputs.dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          context: workflow
          images: ${{ env.IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix=git-
            type=raw,value=latest
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Extract metadata for Docker cache
        id: cache-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=ref,event=branch
          flavor: |
            prefix=cache-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: build and push image to registry
        uses: docker/build-push-action@v6
        with:
          context: apps/ml-optimization-research/${{ inputs.dir }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=registry,ref=${{ steps.cache-meta.outputs.tags }}
          cache-to: type=registry,ref=${{ steps.cache-meta.outputs.tags }},mode=max
          build-args: |
            BUILD_HASH=${{ github.sha }}

  benchmark:
    runs-on: ubuntu-latest
    needs: build
    environment: benchmark
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup k8s cluster
        run: |-
          minikube delete
          minikube start --cpus ${{ inputs.cpus }} --memory ${{ inputs.memory }}
          minikube addons enable metrics-server
          minikube addons enable ingress
          minikube addons enable volumesnapshots
          minikube addons enable csi-hostpath-driver

      - name: Deploy the local overlay of the platform
        run: kubectl apply -k manifests/overlays/local

      - name: Deploy prometheus
        run: kubectl apply -k manifests/overlays/local/prometheus

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node environment
        working-directory: apps/ml-optimization-research/${{ inputs.dir }}
        run: pnpm i

      - name: Setup python environment
        working-directory: apps/ml-optimization-research/${{ inputs.dir }}
        run: |-
          python3 -m venv venv
          source venv/bin/activate
          pip3 install -r requirements.txt

      - name: Download dataset from kaggle
        working-directory: apps/ml-optimization-research/${{ inputs.dir }}
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
          KAGGLE_DATASET: oddrationale/mnist-in-csv
        run: venv/bin/kaggle datasets download ${{ env.KAGGLE_DATASET }} -p dataset --unzip

      - name: Upload dataset to minio
        env:
          MINIO_CLI: https://dl.min.io/client/mc/release/linux-amd64/mc
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          MINIO_DESTINATION_BUCKET: data
          MINIO_SOURCE_DIR: apps/ml-optimization-research/${{ inputs.dir }}/dataset
        run: |-
          curl ${{ env.MINIO_CLI }} --create-dirs -o $HOME/.local/bin/mc
          chmod +x $HOME/.local/bin/mc
          MINIO_ENDPOINT=http://$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}'):30001
          mc alias set efrei $MINIO_ENDPOINT ${{ env.MINIO_ACCESS_KEY }} ${{ env.MINIO_SECRET_KEY }}
          mc mirror --overwrite ${{ env.MINIO_SOURCE_DIR }} efrei/${{ env.MINIO_DESTINATION_BUCKET }}

      - name: Start benchmark
        working-directory: apps/ml-optimization-research/${{ inputs.dir }}
        run: pnpm start

      - name: Generate heatmap
        working-directory: apps/ml-optimization-research/${{ inputs.dir }}
        run: venv/bin/python3 plot.py

      - name: Upload json file and heatmap
        uses: actions/upload-artifact@v4
        with:
          name: values-${{ inputs.dir }}-${{ github.run_id }}
          path: |
            apps/ml-optimization-research/${{ inputs.dir }}/heatmap.png
            apps/ml-optimization-research/${{ inputs.dir }}/metrics.json
